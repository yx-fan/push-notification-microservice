// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v3.19.1
// source: notification.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "notification";

export interface NotificationRequest {
  platform: string;
  region: string;
  token: string;
  title: string;
  body: string;
  other: string;
}

export interface NotificationResponse {
  success: boolean;
  message: string;
}

function createBaseNotificationRequest(): NotificationRequest {
  return { platform: "", region: "", token: "", title: "", body: "", other: "" };
}

export const NotificationRequest = {
  encode(message: NotificationRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.platform !== "") {
      writer.uint32(10).string(message.platform);
    }
    if (message.region !== "") {
      writer.uint32(18).string(message.region);
    }
    if (message.token !== "") {
      writer.uint32(26).string(message.token);
    }
    if (message.title !== "") {
      writer.uint32(34).string(message.title);
    }
    if (message.body !== "") {
      writer.uint32(42).string(message.body);
    }
    if (message.other !== "") {
      writer.uint32(50).string(message.other);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NotificationRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNotificationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.platform = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.region = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.token = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.title = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.body = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.other = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NotificationRequest {
    return {
      platform: isSet(object.platform) ? globalThis.String(object.platform) : "",
      region: isSet(object.region) ? globalThis.String(object.region) : "",
      token: isSet(object.token) ? globalThis.String(object.token) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      body: isSet(object.body) ? globalThis.String(object.body) : "",
      other: isSet(object.other) ? globalThis.String(object.other) : "",
    };
  },

  toJSON(message: NotificationRequest): unknown {
    const obj: any = {};
    if (message.platform !== "") {
      obj.platform = message.platform;
    }
    if (message.region !== "") {
      obj.region = message.region;
    }
    if (message.token !== "") {
      obj.token = message.token;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.body !== "") {
      obj.body = message.body;
    }
    if (message.other !== "") {
      obj.other = message.other;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NotificationRequest>, I>>(base?: I): NotificationRequest {
    return NotificationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NotificationRequest>, I>>(object: I): NotificationRequest {
    const message = createBaseNotificationRequest();
    message.platform = object.platform ?? "";
    message.region = object.region ?? "";
    message.token = object.token ?? "";
    message.title = object.title ?? "";
    message.body = object.body ?? "";
    message.other = object.other ?? "";
    return message;
  },
};

function createBaseNotificationResponse(): NotificationResponse {
  return { success: false, message: "" };
}

export const NotificationResponse = {
  encode(message: NotificationResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NotificationResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNotificationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NotificationResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: NotificationResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NotificationResponse>, I>>(base?: I): NotificationResponse {
    return NotificationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NotificationResponse>, I>>(object: I): NotificationResponse {
    const message = createBaseNotificationResponse();
    message.success = object.success ?? false;
    message.message = object.message ?? "";
    return message;
  },
};

export interface NotificationService {
  SendNotification(request: NotificationRequest): Promise<NotificationResponse>;
}

export const NotificationServiceServiceName = "notification.NotificationService";
export class NotificationServiceClientImpl implements NotificationService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || NotificationServiceServiceName;
    this.rpc = rpc;
    this.SendNotification = this.SendNotification.bind(this);
  }
  SendNotification(request: NotificationRequest): Promise<NotificationResponse> {
    const data = NotificationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SendNotification", data);
    return promise.then((data) => NotificationResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
